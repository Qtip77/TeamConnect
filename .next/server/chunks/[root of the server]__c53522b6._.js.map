{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/config/constants.ts"],"sourcesContent":["export const AUTH_COOKIE_NAME = \"better-auth.session_token\";\n\nexport const ORIGINS = [\"http://localhost:3000\", \"http://localhost:8787\"];\n"],"names":[],"mappings":";;;;AAAO,MAAM,mBAAmB;AAEzB,MAAM,UAAU;IAAC;IAAyB;CAAwB","debugId":null}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/auth-schema.ts"],"sourcesContent":["import { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\n\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: integer(\"email_verified\", { mode: \"boolean\" }).notNull(),\n  image: text(\"image\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n  role: text(\"role\", { enum: [\"driver\", \"maintenance\", \"admin\"] }).notNull().default(\"driver\"),\n  banned: integer(\"banned\", { mode: \"boolean\" }).notNull().default(false),\n  banReason: text(\"banReason\"),\n  banExpires: integer(\"banExpires\", { mode: \"timestamp\" }),\n});\n\nexport const sessions = sqliteTable(\"sessions\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: integer(\"expires_at\", { mode: \"timestamp\" }).notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  impersonatedBy: text(\"impersonatedBy\").references(() => users.id, { onDelete: \"cascade\" }),\n});\n\nexport const accounts = sqliteTable(\"accounts\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: integer(\"access_token_expires_at\", {\n    mode: \"timestamp\",\n  }),\n  refreshTokenExpiresAt: integer(\"refresh_token_expires_at\", {\n    mode: \"timestamp\",\n  }),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n});\n\nexport const verifications = sqliteTable(\"verifications\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: integer(\"expires_at\", { mode: \"timestamp\" }).notNull(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/lib/auth.ts"],"sourcesContent":["import { betterAuth } from \"better-auth\";\nimport { drizzleAdapter } from \"better-auth/adapters/drizzle\";\nimport { nextCookies } from \"better-auth/next-js\";\nimport { magicLink, openAPI, admin } from \"better-auth/plugins\";\nimport { drizzle as drizzleD1 } from \"drizzle-orm/d1\";\nimport type { Context } from \"hono\";\n\nimport { ORIGINS } from \"@/config/constants\";\n\nimport * as schema from \"../../auth-schema\";\nimport type { AppBindings } from \"./types\";\n\nlet authInstance: ReturnType<typeof betterAuth>;\n\nexport function getAuth(c: Context<AppBindings>) {\n  if (!authInstance) {\n    authInstance = betterAuth({\n      advanced: {\n        defaultCookieAttributes: {\n          httpOnly: true,\n          sameSite: \"lax\",\n          partitioned: true,\n        },\n      },\n      trustedOrigins: ORIGINS,\n      secret: c.env.BETTER_AUTH_SECRET,\n      baseURL: c.env.BETTER_AUTH_URL,\n      emailAndPassword: {\n        enabled: true,\n      },\n      plugins: [\n        openAPI(),\n        magicLink({\n          sendMagicLink: async ({ email, url }) => {\n            console.log(email, url);\n          },\n        }),\n        admin(),\n        nextCookies(),\n      ],\n      database: drizzleAdapter(\n        drizzleD1(c.env.DB, {\n          schema: {\n            ...schema,\n          },\n        }),\n        {\n          provider: \"sqlite\",\n          usePlural: true,\n        }\n      ),\n    });\n  }\n  return authInstance;\n}\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;;;;;;;;AAGA,IAAI;AAEG,SAAS,QAAQ,CAAuB;IAC7C,IAAI,CAAC,cAAc;QACjB,eAAe,CAAA,GAAA,kKAAA,CAAA,aAAU,AAAD,EAAE;YACxB,UAAU;gBACR,yBAAyB;oBACvB,UAAU;oBACV,UAAU;oBACV,aAAa;gBACf;YACF;YACA,gBAAgB,4HAAA,CAAA,UAAO;YACvB,QAAQ,EAAE,GAAG,CAAC,kBAAkB;YAChC,SAAS,EAAE,GAAG,CAAC,eAAe;YAC9B,kBAAkB;gBAChB,SAAS;YACX;YACA,SAAS;gBACP,CAAA,GAAA,4KAAA,CAAA,UAAO,AAAD;gBACN,CAAA,GAAA,8KAAA,CAAA,YAAS,AAAD,EAAE;oBACR,eAAe,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE;wBAClC,QAAQ,GAAG,CAAC,OAAO;oBACrB;gBACF;gBACA,CAAA,GAAA,+MAAA,CAAA,QAAK,AAAD;gBACJ,CAAA,GAAA,uKAAA,CAAA,cAAW,AAAD;aACX;YACD,UAAU,CAAA,GAAA,oLAAA,CAAA,iBAAc,AAAD,EACrB,CAAA,GAAA,gJAAA,CAAA,UAAS,AAAD,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE;gBAClB,QAAQ;oBACN,GAAG,gHAAM;gBACX;YACF,IACA;gBACE,UAAU;gBACV,WAAW;YACb;QAEJ;IACF;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/db/auth-schema.sql.ts"],"sourcesContent":["import { sqliteTable, text, integer } from \"drizzle-orm/sqlite-core\";\n\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  emailVerified: integer(\"email_verified\", { mode: \"boolean\" }).notNull(),\n  image: text(\"image\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n  role: text(\"role\", { enum: [\"driver\", \"maintenance\", \"admin\"] }).notNull().default(\"driver\"),\n  banned: integer(\"banned\", { mode: \"boolean\" }).notNull().default(false),\n  banReason: text(\"banReason\"),\n  banExpires: integer(\"banExpires\", { mode: \"timestamp\" }),\n});\n\nexport const sessions = sqliteTable(\"sessions\", {\n  id: text(\"id\").primaryKey(),\n  expiresAt: integer(\"expires_at\", { mode: \"timestamp\" }).notNull(),\n  token: text(\"token\").notNull().unique(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  impersonatedBy: text(\"impersonatedBy\").references(() => users.id, { onDelete: \"cascade\" }),\n});\n\nexport const accounts = sqliteTable(\"accounts\", {\n  id: text(\"id\").primaryKey(),\n  accountId: text(\"account_id\").notNull(),\n  providerId: text(\"provider_id\").notNull(),\n  userId: text(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  accessToken: text(\"access_token\"),\n  refreshToken: text(\"refresh_token\"),\n  idToken: text(\"id_token\"),\n  accessTokenExpiresAt: integer(\"access_token_expires_at\", {\n    mode: \"timestamp\",\n  }),\n  refreshTokenExpiresAt: integer(\"refresh_token_expires_at\", {\n    mode: \"timestamp\",\n  }),\n  scope: text(\"scope\"),\n  password: text(\"password\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull(),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull(),\n});\n\nexport const verifications = sqliteTable(\"verifications\", {\n  id: text(\"id\").primaryKey(),\n  identifier: text(\"identifier\").notNull(),\n  value: text(\"value\").notNull(),\n  expiresAt: integer(\"expires_at\", { mode: \"timestamp\" }).notNull(),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }),\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/db/post-schema.sql.ts"],"sourcesContent":["import { createId } from \"@paralleldrive/cuid2\";\nimport { relations, sql } from \"drizzle-orm\";\nimport { sqliteTable } from \"drizzle-orm/sqlite-core\";\n\nimport { users } from \"./auth-schema.sql\";\n\nexport const posts = sqliteTable(\"posts\", (t) => ({\n  id: t\n    .text(\"id\")\n    .primaryKey()\n    .$defaultFn(() => createId()),\n  title: t.text(\"title\").notNull(),\n  content: t.text(\"content\").notNull(),\n  slug: t.text(\"slug\").notNull(),\n  authorId: t\n    .text(\"author_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  coverImage: t.text(\"cover_image\"),\n  readingTime: t.integer(\"reading_time\").notNull(),\n  excerpt: t.text(\"excerpt\").notNull(),\n  createdAt: t\n    .integer(\"created_at\", { mode: \"timestamp\" })\n    .notNull()\n    .default(sql`(unixepoch())`),\n  updatedAt: t\n    .integer(\"updated_at\", { mode: \"timestamp\" })\n    .notNull()\n    .default(sql`(unixepoch())`),\n}));\n\nexport const postRelations = relations(posts, ({ one }) => ({\n  author: one(users, {\n    fields: [posts.authorId],\n    references: [users.id],\n  }),\n}));\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AAEA;;;;;AAEO,MAAM,QAAQ,CAAA,GAAA,2JAAA,CAAA,cAAW,AAAD,EAAE,SAAS,CAAC,IAAM,CAAC;QAChD,IAAI,EACD,IAAI,CAAC,MACL,UAAU,GACV,UAAU,CAAC,IAAM,CAAA,GAAA,mJAAA,CAAA,WAAQ,AAAD;QAC3B,OAAO,EAAE,IAAI,CAAC,SAAS,OAAO;QAC9B,SAAS,EAAE,IAAI,CAAC,WAAW,OAAO;QAClC,MAAM,EAAE,IAAI,CAAC,QAAQ,OAAO;QAC5B,UAAU,EACP,IAAI,CAAC,aACL,OAAO,GACP,UAAU,CAAC,IAAM,8IAAA,CAAA,QAAK,CAAC,EAAE,EAAE;YAAE,UAAU;QAAU;QACpD,YAAY,EAAE,IAAI,CAAC;QACnB,aAAa,EAAE,OAAO,CAAC,gBAAgB,OAAO;QAC9C,SAAS,EAAE,IAAI,CAAC,WAAW,OAAO;QAClC,WAAW,EACR,OAAO,CAAC,cAAc;YAAE,MAAM;QAAY,GAC1C,OAAO,GACP,OAAO,CAAC,8IAAA,CAAA,MAAG,CAAC,aAAa,CAAC;QAC7B,WAAW,EACR,OAAO,CAAC,cAAc;YAAE,MAAM;QAAY,GAC1C,OAAO,GACP,OAAO,CAAC,8IAAA,CAAA,MAAG,CAAC,aAAa,CAAC;IAC/B,CAAC;AAEM,MAAM,gBAAgB,CAAA,GAAA,6IAAA,CAAA,YAAS,AAAD,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,GAAK,CAAC;QAC1D,QAAQ,IAAI,8IAAA,CAAA,QAAK,EAAE;YACjB,QAAQ;gBAAC,MAAM,QAAQ;aAAC;YACxB,YAAY;gBAAC,8IAAA,CAAA,QAAK,CAAC,EAAE;aAAC;QACxB;IACF,CAAC","debugId":null}},
    {"offset": {"line": 448, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/db/index.ts"],"sourcesContent":["import { type DrizzleD1Database, drizzle } from \"drizzle-orm/d1\";\nimport type { Context } from \"hono\";\n\nimport type { AppBindings } from \"@/lib/types\";\n\nimport * as authSchema from \"./auth-schema.sql\";\nimport * as postSchema from \"./post-schema.sql\";\n\nexport const schema = { ...authSchema, ...postSchema };\nexport type DBSchema = typeof schema;\n\nlet dbInstance: DrizzleD1Database<DBSchema>;\n\nexport function getDB(c: Context<AppBindings>) {\n  if (!dbInstance) {\n    dbInstance = drizzle(c.env.DB, { schema });\n  }\n  return dbInstance;\n}\n"],"names":[],"mappings":";;;;AAAA;AAKA;AACA;;;;AAEO,MAAM,SAAS;IAAE,GAAG,8IAAU;IAAE,GAAG,8IAAU;AAAC;AAGrD,IAAI;AAEG,SAAS,MAAM,CAAuB;IAC3C,IAAI,CAAC,YAAY;QACf,aAAa,CAAA,GAAA,gJAAA,CAAA,UAAO,AAAD,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE;YAAE;QAAO;IAC1C;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/hono-factory.ts"],"sourcesContent":["import { createFactory } from \"hono/factory\";\n\n// import { logger } from \"hono/logger\";\n\nimport { getAuth } from \"@/lib/auth\";\nimport { AppBindings } from \"@/lib/types\";\n\nimport { getDB } from \"./db\";\n\nexport default createFactory<AppBindings>({\n  initApp: (app) => {\n    // app.use(logger());\n    app.use(async (c, next) => {\n      const db = getDB(c);\n      c.set(\"db\", db);\n      await next();\n    });\n    app.use(async (c, next) => {\n      const auth = getAuth(c);\n      c.set(\"auth\", auth);\n      await next();\n    });\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AAEA,wCAAwC;AAExC;AAGA;;;;uCAEe,CAAA,GAAA,4JAAA,CAAA,gBAAa,AAAD,EAAe;IACxC,SAAS,CAAC;QACR,qBAAqB;QACrB,IAAI,GAAG,CAAC,OAAO,GAAG;YAChB,MAAM,KAAK,CAAA,GAAA,8HAAA,CAAA,QAAK,AAAD,EAAE;YACjB,EAAE,GAAG,CAAC,MAAM;YACZ,MAAM;QACR;QACA,IAAI,GAAG,CAAC,OAAO,GAAG;YAChB,MAAM,OAAO,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,EAAE;YACrB,EAAE,GAAG,CAAC,QAAQ;YACd,MAAM;QACR;IACF;AACF","debugId":null}},
    {"offset": {"line": 508, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/middlewares/cors-middleware.ts"],"sourcesContent":["import { cors } from \"hono/cors\";\n\nimport { ORIGINS } from \"@/config/constants\";\n\nexport const corsMiddleware = cors({\n  origin: ORIGINS,\n  allowMethods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n  allowHeaders: [\"Content-Type\", \"Cookie\", \"Authorization\"],\n  credentials: true,\n  maxAge: 86400,\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAD,EAAE;IACjC,QAAQ,4HAAA,CAAA,UAAO;IACf,cAAc;QAAC;QAAO;QAAQ;QAAO;QAAU;KAAU;IACzD,cAAc;QAAC;QAAgB;QAAU;KAAgB;IACzD,aAAa;IACb,QAAQ;AACV","debugId":null}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/middlewares/csrf-middleware.ts"],"sourcesContent":["import { csrf } from \"hono/csrf\";\n\nimport { ORIGINS } from \"@/config/constants\";\n\nexport const csrfMiddleware = csrf({\n  origin: ORIGINS,\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,MAAM,iBAAiB,CAAA,GAAA,6JAAA,CAAA,OAAI,AAAD,EAAE;IACjC,QAAQ,4HAAA,CAAA,UAAO;AACjB","debugId":null}},
    {"offset": {"line": 554, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/middlewares/session-middleware.ts"],"sourcesContent":["import honoFactory from \"../hono-factory\";\n\nexport const sessionMiddleware = honoFactory.createMiddleware(async (c, next) => {\n  const auth = c.get(\"auth\");\n  const userSession = await auth.api.getSession({\n    headers: c.req.raw.headers,\n  });\n  const { user, session } = userSession ?? { user: null, session: null };\n  c.set(\"user\", user);\n  c.set(\"session\", session);\n  await next();\n});\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,oBAAoB,kIAAA,CAAA,UAAW,CAAC,gBAAgB,CAAC,OAAO,GAAG;IACtE,MAAM,OAAO,EAAE,GAAG,CAAC;IACnB,MAAM,cAAc,MAAM,KAAK,GAAG,CAAC,UAAU,CAAC;QAC5C,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO;IAC5B;IACA,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,eAAe;QAAE,MAAM;QAAM,SAAS;IAAK;IACrE,EAAE,GAAG,CAAC,QAAQ;IACd,EAAE,GAAG,CAAC,WAAW;IACjB,MAAM;AACR","debugId":null}},
    {"offset": {"line": 578, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/validations/post.schema.ts"],"sourcesContent":["import { createInsertSchema, createSelectSchema, createUpdateSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nimport { posts } from \"../db/post-schema.sql\";\n\nexport const postSchema = createSelectSchema(posts, {\n  createdAt: z.string().datetime(),\n  updatedAt: z.string().datetime(),\n});\nexport type Post = z.infer<typeof postSchema>;\n\nexport const postCreateSchema = createInsertSchema(posts).pick({\n  title: true,\n  content: true,\n  coverImage: true,\n});\nexport type PostCreate = z.infer<typeof postCreateSchema>;\n\nexport const postUpdateSchema = createUpdateSchema(posts);\nexport type PostUpdate = z.infer<typeof postUpdateSchema>;\n"],"names":[],"mappings":";;;;;AAAA;AACA;AAEA;;;;AAEO,MAAM,aAAa,CAAA,GAAA,0IAAA,CAAA,qBAAkB,AAAD,EAAE,8IAAA,CAAA,QAAK,EAAE;IAClD,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,WAAW,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAChC;AAGO,MAAM,mBAAmB,CAAA,GAAA,0IAAA,CAAA,qBAAkB,AAAD,EAAE,8IAAA,CAAA,QAAK,EAAE,IAAI,CAAC;IAC7D,OAAO;IACP,SAAS;IACT,YAAY;AACd;AAGO,MAAM,mBAAmB,CAAA,GAAA,0IAAA,CAAA,qBAAkB,AAAD,EAAE,8IAAA,CAAA,QAAK","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/routes/posts-route.ts"],"sourcesContent":["import { zValidator } from \"@hono/zod-validator\";\nimport { eq } from \"drizzle-orm\";\nimport slugify from \"slugify\";\n\nimport { posts } from \"../db/post-schema.sql\";\nimport honoFactory from \"../hono-factory\";\nimport { postCreateSchema, postUpdateSchema } from \"../validations/post.schema\";\n\nconst postsRoute = honoFactory\n  .createApp()\n  .get(\"/\", async (c) => {\n    const db = c.get(\"db\");\n    const posts = await db.query.posts.findMany();\n    return c.json(posts);\n  })\n  .post(\"/\", zValidator(\"json\", postCreateSchema), async (c) => {\n    const db = c.get(\"db\");\n    const user = c.get(\"user\");\n    if (!user) {\n      return c.json({ error: \"Unauthorized\" }, 401);\n    }\n    const validJson = c.req.valid(\"json\");\n    const postBody = {\n      ...validJson,\n      excerpt: validJson.content.slice(0, 100),\n      slug: slugify(validJson.title, { lower: true, strict: true, trim: true }),\n      readingTime: Math.ceil(validJson.content.split(\" \").length / 200),\n    };\n    const post = await db.insert(posts).values({\n      ...postBody,\n      authorId: user.id,\n    });\n    return c.json(post);\n  })\n  .get(\"/:slug\", async (c) => {\n    const db = c.get(\"db\");\n    const post = await db.query.posts.findFirst({\n      where: eq(posts.slug, c.req.param(\"slug\")),\n    });\n    if (!post) {\n      return c.json({ error: \"Post not found\" }, 404);\n    }\n    return c.json(post);\n  })\n  .patch(\"/:id\", zValidator(\"json\", postUpdateSchema), async (c) => {\n    const db = c.get(\"db\");\n    const post = await db\n      .update(posts)\n      .set({\n        ...c.req.valid(\"json\"),\n      })\n      .where(eq(posts.id, c.req.param(\"id\")));\n    return c.json(post);\n  })\n  .delete(\"/:id\", async (c) => {\n    const db = c.get(\"db\");\n    const post = await db.delete(posts).where(eq(posts.id, c.req.param(\"id\")));\n    return c.json(post);\n  });\n\nexport default postsRoute;\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;AAEA,MAAM,aAAa,kIAAA,CAAA,UAAW,CAC3B,SAAS,GACT,GAAG,CAAC,KAAK,OAAO;IACf,MAAM,KAAK,EAAE,GAAG,CAAC;IACjB,MAAM,QAAQ,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ;IAC3C,OAAO,EAAE,IAAI,CAAC;AAChB,GACC,IAAI,CAAC,KAAK,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,gJAAA,CAAA,mBAAgB,GAAG,OAAO;IACtD,MAAM,KAAK,EAAE,GAAG,CAAC;IACjB,MAAM,OAAO,EAAE,GAAG,CAAC;IACnB,IAAI,CAAC,MAAM;QACT,OAAO,EAAE,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;IAC3C;IACA,MAAM,YAAY,EAAE,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAM,WAAW;QACf,GAAG,SAAS;QACZ,SAAS,UAAU,OAAO,CAAC,KAAK,CAAC,GAAG;QACpC,MAAM,CAAA,GAAA,oIAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,EAAE;YAAE,OAAO;YAAM,QAAQ;YAAM,MAAM;QAAK;QACvE,aAAa,KAAK,IAAI,CAAC,UAAU,OAAO,CAAC,KAAK,CAAC,KAAK,MAAM,GAAG;IAC/D;IACA,MAAM,OAAO,MAAM,GAAG,MAAM,CAAC,8IAAA,CAAA,QAAK,EAAE,MAAM,CAAC;QACzC,GAAG,QAAQ;QACX,UAAU,KAAK,EAAE;IACnB;IACA,OAAO,EAAE,IAAI,CAAC;AAChB,GACC,GAAG,CAAC,UAAU,OAAO;IACpB,MAAM,KAAK,EAAE,GAAG,CAAC;IACjB,MAAM,OAAO,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC;QAC1C,OAAO,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,8IAAA,CAAA,QAAK,CAAC,IAAI,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC;IACpC;IACA,IAAI,CAAC,MAAM;QACT,OAAO,EAAE,IAAI,CAAC;YAAE,OAAO;QAAiB,GAAG;IAC7C;IACA,OAAO,EAAE,IAAI,CAAC;AAChB,GACC,KAAK,CAAC,QAAQ,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,QAAQ,gJAAA,CAAA,mBAAgB,GAAG,OAAO;IAC1D,MAAM,KAAK,EAAE,GAAG,CAAC;IACjB,MAAM,OAAO,MAAM,GAChB,MAAM,CAAC,8IAAA,CAAA,QAAK,EACZ,GAAG,CAAC;QACH,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,OAAO;IACxB,GACC,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,8IAAA,CAAA,QAAK,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC;IAClC,OAAO,EAAE,IAAI,CAAC;AAChB,GACC,MAAM,CAAC,QAAQ,OAAO;IACrB,MAAM,KAAK,EAAE,GAAG,CAAC;IACjB,MAAM,OAAO,MAAM,GAAG,MAAM,CAAC,8IAAA,CAAA,QAAK,EAAE,KAAK,CAAC,CAAA,GAAA,oKAAA,CAAA,KAAE,AAAD,EAAE,8IAAA,CAAA,QAAK,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,KAAK,CAAC;IACnE,OAAO,EAAE,IAAI,CAAC;AAChB;uCAEa","debugId":null}},
    {"offset": {"line": 677, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/middlewares/admin-middleware.ts"],"sourcesContent":["import type { Context } from \"hono\";\nimport { getCookie } from \"hono/cookie\";\n\nexport async function adminMiddleware(c: Context, next: () => Promise<void>) {\n  const sessionCookie = getCookie(c, \"auth_session\");\n  const auth = c.get(\"auth\");\n\n  if (!sessionCookie) {\n    return c.json({ message: \"Authentication required\" }, 401);\n  }\n\n  try {\n    const session = await auth.api.getSession({\n      headers: c.req.raw.headers,\n    });\n    \n    if (!session.user) {\n      return c.json({ message: \"Authentication required\" }, 401);\n    }\n\n    // Check if user has admin role\n    if (session.user.role !== \"admin\") {\n      return c.json({ message: \"Admin access required\" }, 403);\n    }\n\n    c.set(\"admin\", session.user);\n    await next();\n  } catch (error) {\n    return c.json({ message: \"Authentication failed\" }, 401);\n  }\n} "],"names":[],"mappings":";;;AACA;;AAEO,eAAe,gBAAgB,CAAU,EAAE,IAAyB;IACzE,MAAM,gBAAgB,CAAA,GAAA,2JAAA,CAAA,YAAS,AAAD,EAAE,GAAG;IACnC,MAAM,OAAO,EAAE,GAAG,CAAC;IAEnB,IAAI,CAAC,eAAe;QAClB,OAAO,EAAE,IAAI,CAAC;YAAE,SAAS;QAA0B,GAAG;IACxD;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,KAAK,GAAG,CAAC,UAAU,CAAC;YACxC,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,OAAO;QAC5B;QAEA,IAAI,CAAC,QAAQ,IAAI,EAAE;YACjB,OAAO,EAAE,IAAI,CAAC;gBAAE,SAAS;YAA0B,GAAG;QACxD;QAEA,+BAA+B;QAC/B,IAAI,QAAQ,IAAI,CAAC,IAAI,KAAK,SAAS;YACjC,OAAO,EAAE,IAAI,CAAC;gBAAE,SAAS;YAAwB,GAAG;QACtD;QAEA,EAAE,GAAG,CAAC,SAAS,QAAQ,IAAI;QAC3B,MAAM;IACR,EAAE,OAAO,OAAO;QACd,OAAO,EAAE,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;IACtD;AACF","debugId":null}},
    {"offset": {"line": 719, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/routes/admin-route.ts"],"sourcesContent":["import { zValidator } from \"@hono/zod-validator\";\nimport { z } from \"zod\";\nimport { eq } from \"drizzle-orm\";\n\nimport honoFactory from \"../hono-factory\";\nimport { adminMiddleware } from \"../middlewares/admin-middleware\";\nimport { users as usersTable } from \"../db/auth-schema.sql\";\n\nconst changeRoleSchema = z.object({\n  role: z.enum([\"driver\", \"maintenance\", \"admin\"]),\n});\n\nconst banUserSchema = z.object({\n  reason: z.string().min(1),\n  days: z.number().int().positive(),\n});\n\nconst adminRoute = honoFactory\n  .createApp()\n  .use(\"*\", adminMiddleware)\n  .get(\"/users\", async (c) => {\n    try {\n      const db = c.get(\"db\");\n      const allUsers = await db.select().from(usersTable);\n      return c.json(allUsers);\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"Failed to fetch users\";\n      return c.json({ message }, 500);\n    }\n  })\n  .delete(\"/users/:id\", async (c) => {\n    const userId = c.req.param(\"id\");\n    const adminUser = c.get(\"admin\");\n    \n    // Prevent self-deletion\n    if (userId === adminUser.id) {\n      return c.json({ message: \"Cannot delete your own account\" }, 400);\n    }\n    \n    try {\n      const db = c.get(\"db\");\n      await db.delete(usersTable).where(eq(usersTable.id, userId));\n      return c.json({ success: true });\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"Failed to delete user\";\n      return c.json({ message }, 500);\n    }\n  })\n  .post(\"/users/:id/role\", zValidator(\"json\", changeRoleSchema), async (c) => {\n    const userId = c.req.param(\"id\");\n    const { role } = c.req.valid(\"json\");\n    const adminUser = c.get(\"admin\");\n    \n    // Prevent changing own role\n    if (userId === adminUser.id) {\n      return c.json({ message: \"Cannot change your own role\" }, 400);\n    }\n    \n    try {\n      const db = c.get(\"db\");\n      await db\n        .update(usersTable)\n        .set({ \n          role,\n          updatedAt: new Date()\n        })\n        .where(eq(usersTable.id, userId));\n      \n      return c.json({ success: true });\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"Failed to update role\";\n      return c.json({ message }, 500);\n    }\n  })\n  .post(\"/users/:id/ban\", zValidator(\"json\", banUserSchema), async (c) => {\n    const userId = c.req.param(\"id\");\n    const { reason, days } = c.req.valid(\"json\");\n    const adminUser = c.get(\"admin\");\n    \n    // Prevent self-ban\n    if (userId === adminUser.id) {\n      return c.json({ message: \"Cannot ban yourself\" }, 400);\n    }\n    \n    const banExpires = new Date();\n    banExpires.setDate(banExpires.getDate() + days);\n    \n    try {\n      const db = c.get(\"db\");\n      await db\n        .update(usersTable)\n        .set({ \n          banned: true,\n          banReason: reason,\n          banExpires,\n          updatedAt: new Date()\n        })\n        .where(eq(usersTable.id, userId));\n      \n      return c.json({ success: true });\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"Failed to ban user\";\n      return c.json({ message }, 500);\n    }\n  })\n  .post(\"/users/:id/unban\", async (c) => {\n    const userId = c.req.param(\"id\");\n    \n    try {\n      const db = c.get(\"db\");\n      await db\n        .update(usersTable)\n        .set({ \n          banned: false,\n          banReason: null,\n          banExpires: null,\n          updatedAt: new Date()\n        })\n        .where(eq(usersTable.id, userId));\n      \n      return c.json({ success: true });\n    } catch (error) {\n      const message = error instanceof Error ? error.message : \"Failed to unban user\";\n      return c.json({ message }, 500);\n    }\n  });\n\nexport default adminRoute; "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 858, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/server/index.ts"],"sourcesContent":["import { getAuth } from \"@/lib/auth\";\n\nimport honoFactory from \"./hono-factory\";\nimport { corsMiddleware } from \"./middlewares/cors-middleware\";\nimport { csrfMiddleware } from \"./middlewares/csrf-middleware\";\nimport { sessionMiddleware } from \"./middlewares/session-middleware\";\nimport postsRoute from \"./routes/posts-route\";\nimport adminRoute from \"./routes/admin-route\";\n\nconst routes = honoFactory\n  .createApp()\n  .basePath(\"/api\")\n  .use(corsMiddleware)\n  .use(csrfMiddleware)\n  .use(sessionMiddleware)\n  .on([\"POST\", \"GET\"], \"/auth/*\", (c) => {\n    return getAuth(c).handler(c.req.raw);\n  })\n  .route(\"/posts\", postsRoute)\n  .route(\"/admin\", adminRoute);\n\nexport type HonoApp = typeof routes;\nexport default routes;\n"],"names":[],"mappings":";;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AAEA,MAAM,SAAS,kIAAA,CAAA,UAAW,CACvB,SAAS,GACT,QAAQ,CAAC,QACT,GAAG,CAAC,oJAAA,CAAA,iBAAc,EAClB,GAAG,CAAC,oJAAA,CAAA,iBAAc,EAClB,GAAG,CAAC,uJAAA,CAAA,oBAAiB,EACrB,EAAE,CAAC;IAAC;IAAQ;CAAM,EAAE,WAAW,CAAC;IAC/B,OAAO,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,EAAE,GAAG,OAAO,CAAC,EAAE,GAAG,CAAC,GAAG;AACrC,GACC,KAAK,CAAC,UAAU,2IAAA,CAAA,UAAU,EAC1B,KAAK,CAAC,UAAU,2IAAA,CAAA,UAAU;uCAGd","debugId":null}},
    {"offset": {"line": 888, "column": 0}, "map": {"version":3,"sources":["file:///home/qtip/Desktop/TeamConnect/src/app/api/%5B...route%5D/route.ts"],"sourcesContent":["import { handle } from \"hono/vercel\";\n\nimport routes from \"@/server\";\n\nexport const GET = handle(routes);\nexport const POST = handle(routes);\n"],"names":[],"mappings":";;;;AAAA;AAAA;AAEA;;;AAEO,MAAM,MAAM,CAAA,GAAA,8JAAA,CAAA,SAAM,AAAD,EAAE,wHAAA,CAAA,UAAM;AACzB,MAAM,OAAO,CAAA,GAAA,8JAAA,CAAA,SAAM,AAAD,EAAE,wHAAA,CAAA,UAAM","debugId":null}}]
}